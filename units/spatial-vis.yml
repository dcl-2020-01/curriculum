title: Spatial visualization
theme: visualize
needs: spatial-basics
readings: ~
updated: ~
desc: "\n``` r\nlibrary(tidyverse)\nlibrary(sf)\n```\n\nIn *Spatial basics*, you learned
  how to plot spatial data using the\n`plot()` function. Now, we’ll show you how to
  visualize spatial data\nusing `geom_sf()`. `geom_sf()` has the advantage of being
  part of\nggplot2, meaning you can layer geoms, use scales functions to change\ncolors,
  easily tweak legends, alter the theme, etc.\n\n## `geom_sf()`\n\nThe [ussf package](https://github.com/dcl-docs/ussf)
  makes it easy to\ncreate maps of the U.S. by supplying state, county, or commuting
  zone\nboundaries. Use `geography = \"state\"` to return boundaries for all U.S.\nstates.\n\n```
  r\nstates <- ussf::boundaries(geography = \"state\")\n\nstates %>% \n  select(GEOID,
  NAME, geometry)\n#> Simple feature collection with 51 features and 2 fields\n#>
  geometry type:  MULTIPOLYGON\n#> dimension:      XY\n#> bbox:           xmin: -2358696
  ymin: -1338125 xmax: 2258154 ymax: 1558935\n#> epsg (SRID):    NA\n#> proj4string:
  \   +proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=WGS84
  +units=m +no_defs\n#> # A tibble: 51 x 3\n#>    GEOID NAME                                                           geometry\n#>
  \   <chr> <chr>                                                <MULTIPOLYGON [m]>\n#>
  \ 1 24    Maryland   (((1722285 240378.6, 1725330 242308.6, 1728392 239316.5, 17…\n#>
  \ 2 19    Iowa       (((-50588.83 591418, -46981.68 596802.6, -43690.9 602462.9,…\n#>
  \ 3 10    Delaware   (((1705278 431220.8, 1706137 435509.7, 1708323 439919.9, 17…\n#>
  \ 4 39    Ohio       (((1081987 544758, 1084616 548413.9, 1088580 545713.1, 1088…\n#>
  \ 5 42    Pennsylva… (((1287712 486864, 1286266 495787.9, 1283800 511007.6, 1283…\n#>
  \ 6 31    Nebraska   (((-670097.4 433429.4, -668488.7 451690.8, -667385.4 464518…\n#>
  \ 7 53    Washington (((-2000238 1535265, -1987818 1533508, -1983536 1534701, -1…\n#>
  \ 8 01    Alabama    (((708460.5 -598742.7, 708114 -594376.4, 708487.4 -580948.4…\n#>
  \ 9 05    Arkansas   (((122656.3 -111221.4, 145436.8 -110838.5, 170649.1 -110435…\n#>
  10 35    New Mexico (((-1226428 -553334.3, -1221959 -521613.4, -1216674 -483827…\n#>
  # … with 41 more rows\n```\n\nWe can use `geom_sf()` to plot the state boundaries.\n\n```
  r\nstates %>% \n  ggplot() +\n  geom_sf()\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-3-1.png)<!--
  -->\n\nWe don’t have to supply any aesthetic mappings to `ggplot()`.\n`geom_sf()`
  will, by default, use the column that stores simple features\ndata. This column
  will be of class `sfc` and typically be called\n`geometry`.\n\n``` r\nclass(states$geometry)\n#>
  [1] \"sfc_MULTIPOLYGON\" \"sfc\"\n```\n\n## Projections\n\nThe Earth is not flat,
  but your plots are. To create effective maps,\nyou’ll need to project a three-dimensional
  shape (the Earth) onto a\ntwo-dimensional surface (your screen).\n\nLatitude and
  longitude coordinates are unprojected. Each point picked\nout by a longitude and
  latitude combination specifies a point on an\nellipsoid. This means that plots of
  large geographic areas, like the\nU.S., will look strange when plotted in longitude-latitude.\n\n```
  r\nstates_longlat <- \n  ussf::boundaries(geography = \"state\", projection = \"longlat\")\n
  \nstates_longlat %>% \n  filter(!(NAME %in% c(\"Alaska\", \"Hawaii\"))) %>% \n  ggplot()
  +\n  geom_sf()\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-5-1.png)<!--
  -->\n\nA different projection will improve our map substantially. When mapping\nthe
  entire U.S., we recommend U.S. Albers. U.S. Albers is the default\nfor the ussf
  package.\n\n``` r\nstates_albers <- ussf::boundaries(geography = \"state\")\n\nstates_albers
  %>% \n  ggplot() +\n  geom_sf()\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-6-1.png)<!--
  -->\n\nAnytime you project a three-dimensional object onto a two-dimensional\nobject,
  some aspect of the object will be distorted. U.S. Albers chooses\nto accurately
  reflect area, at the cost of minimally distorting scale\nand shape.\n\nussf also
  scales Alaska and Hawaii and places them below the continental\nU.S. This is not
  related to the Albers projection.\n\nIf you’re visualizing a small geographic area,
  like North Carolina, you\ncan just use longitude and latitude. The Earth is approximately
  flat for\na small enough area.\n\n``` r\nstates_longlat %>% \n  filter(NAME == \"North
  Carolina\") %>% \n  ggplot() +\n  geom_sf()\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-7-1.png)<!--
  -->\n\nHowever, California covers a bit too much area for this to work. On its\nown,
  California also looks strange if projected with U.S. Albers.\n\n``` r\nstates_albers
  %>% \n  filter(NAME == \"California\") %>%\n  ggplot() +\n  geom_sf()\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-8-1.png)<!--
  -->\n\nLuckily, there’s an Albers equal area projection just for California,\ncalled
  California Albers. You can specify the projection and coordinate\nreference system
  for a map using *PROJ strings*. Here’s the PROJ string\nfor California Albers.\n\n```
  r\nCA_ALBERS <- \n  \"+proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0
  +y_0=-4000000 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\"\n```\n\n*aea* stands
  for *Albers equal area*, and we are using the [WGS84\ncoordinate reference\nsystem](https://en.wikipedia.org/wiki/World_Geodetic_System).
  The\n[Spatial Reference](https://spatialreference.org/) website is a good\nplace
  to look up PROJ strings.\n\nWe can change the projection before plotting with `st_transform()`.\n\n```
  r\nstates_albers %>% \n  filter(NAME == \"California\") %>% \n  st_transform(crs
  = CA_ALBERS) %>% \n  ggplot() +\n  geom_sf() \n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-10-1.png)<!--
  -->\n\n## Choropleths\n\nSay we want to visualize population density across California
  counties.\n`population` contains population data for California counties.\n\n```
  r\npopulation\n#> # A tibble: 58 x 3\n#>     fips name                            population\n#>
  \   <int> <chr>                                <dbl>\n#>  1  6001 Alameda County,
  California         1666753\n#>  2  6003 Alpine County, California             1101\n#>
  \ 3  6005 Amador County, California            39383\n#>  4  6007 Butte County,
  California            231256\n#>  5  6009 Calaveras County, California         45602\n#>
  \ 6  6011 Colusa County, California            21627\n#>  7  6013 Contra Costa County,
  California    1150215\n#>  8  6015 Del Norte County, California         27828\n#>
  \ 9  6017 El Dorado County, California        190678\n#> 10  6019 Fresno County,
  California           994400\n#> # … with 48 more rows\n```\n\n(We obtained the population
  data from the Census Bureau’s Population\nEstimates API. See our chapter on [Census
  Bureau\nAPIs](http://dcl-wrangle.stanford.edu/census.html) for more\ninformation.)\n\nWe’ll
  join our population data with boundaries from\n`ussf::boundaries()`. Because we’re
  looking at a smaller area, we can\nuse a higher resolution than the default.\n\n```
  r\nFIPS_CA <- 6L\n\nca_counties <-\n  ussf::boundaries(geography = \"county\", resolution
  = \"5m\") %>% \n  filter(as.integer(STATEFP) == FIPS_CA) %>% \n  st_transform(crs
  = CA_ALBERS) %>% \n  transmute(\n    fips = as.integer(GEOID),\n    area_land =
  ALAND\n  ) %>% \n  left_join(population, by = \"fips\") %>% \n  select(fips, name,
  population, area_land) \n\nca_counties\n#> Simple feature collection with 58 features
  and 4 fields\n#> geometry type:  MULTIPOLYGON\n#> dimension:      XY\n#> bbox:           xmin:
  -373976.1 ymin: -604512.6 xmax: 539719.6 ymax: 450022.5\n#> epsg (SRID):    NA\n#>
  proj4string:    +proj=aea +lat_1=34 +lat_2=40.5 +lat_0=0 +lon_0=-120 +x_0=0 +y_0=-4000000
  +datum=WGS84 +units=m +no_defs\n#> # A tibble: 58 x 5\n#>     fips name         population
  area_land                              geometry\n#>    <int> <chr>             <dbl>
  \    <dbl>                    <MULTIPOLYGON [m]>\n#>  1  6003 Alpine Coun…       1101
  \  1.91e 9 (((-6313.368 54862.23, -6288.982 763…\n#>  2  6109 Tuolumne Co…      54539
  \  5.75e 9 (((-57354.39 -20135.31, -56604.18 -1…\n#>  3  6103 Tehama Coun…      63916
  \  7.64e 9 (((-260050.9 256364.8, -259224.1 256…\n#>  4  6105 Trinity Cou…      12535
  \  8.23e 9 (((-304746.5 329673.1, -304086.2 329…\n#>  5  6069 San Benito …      61537
  \  3.60e 9 (((-146300.2 -123496.5, -144972.2 -1…\n#>  6  6091 Sierra Coun…       2987
  \  2.47e 9 (((-90893.55 169529.6, -89956.05 170…\n#>  7  6017 El Dorado C…     190678
  \  4.42e 9 (((-98544.49 77921.37, -95712.73 860…\n#>  8  6053 Monterey Co…     435594
  \  8.50e 9 (((-176798.7 -157764.9, -176064 -157…\n#>  9  6057 Nevada Coun…      99696
  \  2.48e 9 (((-110362.9 135706, -108569.7 13855…\n#> 10  6071 San Bernard…    2171603
  \  5.20e10 (((204595.5 -443243.5, 206219.5 -443…\n#> # … with 48 more rows\n```\n\nNote
  that you have to supply the boundaries data as the first argument\nof `left_join()`.
  If you supply it as the second, the tibble will lose\nits `sfc` class, and `geom_sf()`
  will no longer work as expected.\n\nJust like with other geoms, you can supply additional
  aesthetics to\n`geom_sf()`. For polygons like the counties of California, `fill`
  is the\nmost useful aesthetic. Let’s visualize population density by county.\n\n`area_land`
  is in square meters, but we’ll express density in terms of\npopulation per square
  mile.\n\n``` r\nca_counties <-\n  ca_counties %>% \n  mutate(density = population
  / (area_land * 3.861e-7))\n  \nca_counties %>% \n  ggplot(aes(fill = density)) +\n
  \ geom_sf(color = \"white\", size = 0.2)\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-14-1.png)<!--
  -->\n\nMaps like this one, in which geographic areas are colored according to\nsome
  variable, are called *choropleths*.\n\nOur map has a substantial problem. It’s pretty
  much all the same color\\!\nIt’s very difficult to tell the difference in population
  density between\ncounties, particularly for low-density counties.\n\nLet’s look
  at the distribution of `density`.\n\n``` r\nca_counties %>% \n  ggplot(aes(density))
  +\n  geom_histogram(binwidth = 200) \n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-15-1.png)<!--
  -->\n\nMost of the counties are low density, but there are some outliers. By\ndefault,
  our sequential color scale will linearly map colors between the\nminimum (1.49)
  and the maximum (18,849). (The extreme outlier is San\nFrancisco County.)\n\nOne
  way to deal with this problem is to cap `density` using `pmin()`.\nNow, everything
  above our cutoff will be represented with the same\ncolor.\n\n``` r\nca_counties
  %>% \n  mutate(density = pmin(density, 700)) %>% \n  ggplot(aes(fill = density))
  +\n  geom_sf() \n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-16-1.png)<!--
  -->\n\nThis map makes it much easier to see the high density areas and compare\nthe
  lower density areas to each other. A better color scale and thinner\nborders will
  also improve our plot.\n\n``` r\nca_counties %>% \n  mutate(density = pmin(density,
  700)) %>% \n  ggplot(aes(fill = density)) +\n  geom_sf(size = 0.3) +\n  scale_fill_gradientn(\n
  \   colors = RColorBrewer::brewer.pal(n = 9, name = \"PuRd\")\n  )\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-17-1.png)<!--
  -->\n\nYou can find this lighter color scale, and many others, at the\n[ColorBrewer
  website](http://colorbrewer2.org/#). You can also browse\nall the palettes included
  in the RColorBrewer package by running\n`RColorBrewer::display.brewer.all()`.\n\nIf
  you do truncate a variable to improve your color scale, make sure to\nclearly indicate
  that you did so in your legend.\n\n``` r\nlabels <- function(x) {\n  if_else(x <
  700, as.character(x), \"700+\")\n}\n\nca_counties %>% \n  mutate(density = pmin(density,
  700)) %>% \n  ggplot(aes(fill = density)) +\n  geom_sf(size = 0.3) +\n  scale_fill_gradientn(\n
  \   breaks = scales::breaks_width(width = 200, offset = -100),\n    labels = labels,\n
  \   colors = RColorBrewer::brewer.pal(n = 9, name = \"PuRd\")\n  )  +\n  theme_void()
  +\n  labs(\n    fill = \"Population density\\n(population / square mile)\"\n  )\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-18-1.png)<!--
  -->\n\n`theme_void()` is an easy way to remove the grid lines and tick mark\nlabels,
  which aren’t necessary for someone to understand our map.\n\n## Layering\n\nJust
  like with other geoms, you can layer `geom_sf()` with additional\n`geom_sf()`s or
  other geoms.\n\nPreviously, we’ve been plotting multipolygons with `geom_sf()`.\n\n```
  r\nclass(ca_counties$geometry)\n#> [1] \"sfc_MULTIPOLYGON\" \"sfc\"\n```\n\nRecall
  that *sf* stands for *simple features* and there are many types\nof simple features,
  including multipolygons, lines, and points. If\n`geom_sf()` encounters a point,
  it will plot a point.\n\n``` r\nca_counties %>% \n  ggplot() +\n  geom_sf() +\n
  \ geom_sf(\n    color = \"blue\", \n    data = . %>% mutate(geometry = st_centroid(geometry))\n
  \ )\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-20-1.png)<!-- -->\n\nYou
  can also use `geom_sf_label()` or `geom_sf_text()` to add text to\nyour maps.\n\n```
  r\nlowest_density <-\n  ca_counties %>% \n  top_n(n = -1, wt = density)\n\nca_counties
  %>% \n  mutate(density = pmin(density, 700)) %>% \n  ggplot() +\n  geom_sf() +\n
  \ geom_sf(\n    color = \"blue\",\n    data = lowest_density %>% mutate(geometry
  = st_centroid(geometry))\n  ) +\n  geom_sf_label(\n    aes(label = str_remove(name,
  \", California\")),\n    hjust = -0.05,\n    vjust = -0.1,\n    data = lowest_density\n
  \ )\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-21-1.png)<!-- -->\n\n##
  Zooming\n\nJust as you can use `coord_cartesian()` to zoom in on a normal plot,
  you\ncan use `coord_sf()` to zoom in on your map.\n\nLet’s just plot Hawaii. We’ll
  use `projection = \"longlat\"` because\nHawaii covers only a small area. Also, setting
  `project = \"albers\"`\nwould scale Hawaii and place it under Texas.\n\n``` r\nhawaii
  <-\n  ussf::boundaries(\n    geograph = \"cz\", \n    resolution = \"500k\", \n
  \   projection = \"longlat\"\n  ) %>% \n  filter(state == \"HI\")\n\nhawaii %>%
  \n  ggplot() +\n  geom_sf()\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-22-1.png)<!--
  -->\n\nWe can use `coord_sf()` to zoom in on the main islands.\n\n``` r\nhawaii
  %>% \n  ggplot() +\n  geom_sf() +\n  coord_sf(\n    xlim = c(-160.5, -154.7), \n
  \   ylim = c(18.9, 22.25)\n  )\n```\n\n![](spatial-vis_files/figure-gfm/unnamed-chunk-23-1.png)<!--
  -->\n"
